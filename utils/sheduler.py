import json
import os
import sqlite3
from datetime import date, datetime

import pytz
from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest

from config_data.config import load_config, Config

config: Config = load_config('.env')

admin_send_remind_id = config.tg_bot.admin_send_remind_id
admin_ids = config.tg_bot.admin_ids


async def remind_send_report(bot: Bot):
    print('Start function remind_send_report')
    # base_dir = os.path.dirname(os.path.abspath(__file__))  # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–∞
    # db_path = os.path.join(base_dir, '../../tsa/db.sqlite3')  # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ
    db_path = '/app/db/db.sqlite3' # –ü—Ä–∏ —Ä–∞–±–æ—Ç–µ –∏–∑ –¥–æ–∫–µ—Ä–∞

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    # üîπ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Å–≤—è–∑—å —Å –æ–±—ä–µ–∫—Ç–æ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
    cursor.execute("""
        SELECT tg_id 
        FROM tsa_app_worker 
        WHERE build_obj_id IS NOT NULL
    """)
    user_all_ids = [row[0] for row in cursor.fetchall()]

    # üîπ –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç—á—ë—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
    cursor.execute("""
        SELECT DISTINCT w.tg_id 
        FROM tsa_app_worker w 
        JOIN tsa_app_workentry we ON w.id = we.worker_id 
        WHERE we.date = DATE('now', '-7 hours')
    """)
    user_ids_report = [row[0] for row in cursor.fetchall()]

    conn.close()

    # üîπ –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç—á—ë—Ç
    users_to_remind = set(user_all_ids) - set(user_ids_report)

    # üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –æ—Ç—á–∏—Ç–∞–ª–∏—Å—å
    for user_id in users_to_remind:
        try:
            await bot.send_message(
                user_id,
                text="You didn't send the report today. If you didn't work today, ignore this message"
            )
        except TelegramBadRequest:
            print(f"Unable to send message to {user_id}")


# async def no_report(bot: Bot):
#     base_dir = os.path.dirname(os.path.abspath(__file__))  # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–∞
#     db_path = os.path.join(base_dir, '../../tsa/db.sqlite')  # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ
#
#     # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
#     conn = sqlite3.connect(db_path)
#     cursor = conn.cursor()
#
#     # # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (tg_id –∏ –∏–º–µ–Ω–∞)
#     # cursor.execute("SELECT id, name FROM tsa_app_worker")
#     # all_users = cursor.fetchall()
#
#     # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Å–≤—è–∑—å —Å –æ–±—ä–µ–∫—Ç–æ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
#     cursor.execute("SELECT id, name FROM tsa_app_worker WHERE build_obj_id IS NOT NULL")
#     all_users = cursor.fetchall()
#
#     # id –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#     user_all_ids = {row[0]: row[1] for row in all_users}  # tg_id -> name
#
#     # –ü–æ–ª—É—á–∞–µ–º worker_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç—á—ë—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –¥–∞–Ω–Ω—ã–º)
#     cursor.execute("""
#         SELECT DISTINCT worker_id
#         FROM tsa_app_workentry
#         WHERE date = DATE('now', '-7 hours')
#     """)
#     # ('now', '-7 hours') –≤ –∑–∞–ø—Ä–æ—Å–µ –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏ UTC –∏ –ö–∞–ª–≥–∞—Ä–∏
#     # –ö–æ–≥–¥–∞ –≤ –ö–∞–ª–≥–∞—Ä–∏ –µ—â–µ 1-–µ —á–∏–∏—Å–ª–æ, –ø–æ UTC –¥–∞—Ç–∞ —É–∂–µ 2-–µ —á–∏—Å–ª–æ
#     worker_ids_report = [row[0] for row in cursor.fetchall()]
#
#     # –ù–∞—Ö–æ–¥–∏–º tg_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á—ë—Ç
#     users_no_report = [
#         user_all_ids[tg_id]
#         for tg_id in user_all_ids.keys()
#         if tg_id not in worker_ids_report
#     ]
#     # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π
#     conn.close()
#
#     if not users_no_report:
#         await bot.send_message(
#             admin_send_remind_id,
#             text="All employees have sent their reports. ‚úÖ"
#         )
#     else:
#         await bot.send_message(
#             admin_send_remind_id,
#             text=f"The employees did not send the report: {', '.join(users_no_report)}"
#         )


async def get_users_with_negative_statistics():
    print('Start function get_users_with_negative_statistics')
    # base_dir = os.path.dirname(os.path.abspath(__file__))  # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–∞
    # db_path = os.path.join(base_dir, '../../tsa/db.sqlite3')  # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ
    db_path = '/app/db/db.sqlite3' # –ü—Ä–∏ —Ä–∞–±–æ—Ç–µ –∏–∑ –¥–æ–∫–µ—Ä–∞

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT name, price FROM tsa_app_material")
    all_materials = cursor.fetchall()

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ü–µ–Ω–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    material_prices = {name: price for name, price in all_materials}

    # –ü–æ–ª—É—á–∞–µ–º id —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤, –∏—Ö –∏–º–µ–Ω–∞ –∏ –ø–æ—á–∞—Å–æ–≤—É—é —Å—Ç–∞–≤–∫—É –∑–∞—Ä–ø–ª–∞—Ç—ã
    cursor.execute("SELECT id, name, salary FROM tsa_app_worker")
    id_name_salary = cursor.fetchall()

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—Ä–ø–ª–∞—Ç–µ –∏ –∏–º–µ–Ω–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
    worker_salary = {worker_id: salary for worker_id, _, salary in id_name_salary}
    worker_name = {worker_id: name for worker_id, name, _ in id_name_salary}

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç
    cursor.execute(
        "SELECT worker_id, worked_hours, materials_used FROM tsa_app_workentry WHERE date = DATE('now', '-7 hours')"
    )
    all_results = cursor.fetchall()

    efficiency_list = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è [name, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å]

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for worker_id, worked_hours, materials_used in all_results:
        # –ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –¥–µ–Ω—å
        daily_salary = worked_hours * worker_salary.get(worker_id, 0)

        # –ú–∞—Ç–µ—Ä–∏–∞–ª—ã, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞ –¥–µ–Ω—å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–∞–∫ JSON-—Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º –∏—Ö
        materials_used_dict = json.loads(materials_used)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ json.loads)

        # –°—á–∏—Ç–∞–µ–º –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        earnings_from_materials = sum(
            material_prices.get(material, 0) * float(quantity)
            for material, quantity in materials_used_dict.items()
        )

        # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        efficiency = round(earnings_from_materials - daily_salary, 2)
        print('efficiency', efficiency)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è
        if efficiency < 0:
            efficiency_list.append([worker_name[worker_id], efficiency])

    conn.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π
    print(f'Function get_users_with_negative_statistics return {efficiency_list}')
    return efficiency_list


# async def send_users_with_negative_statistics(bot: Bot):
#     efficiency_list = await get_users_with_negative_statistics()
#     if not efficiency_list:
#         await bot.send_message(
#             admin_send_remind_id,
#             text="No users with negative statistics for today."
#         )
#     else:
#         await bot.send_message(
#             admin_send_remind_id,
#             text="List of users with negative statistics:\n" +
#                  "\n".join(f"{name}: {efficiency}" for name, efficiency in efficiency_list)
#         )



async def send_users_with_negative_statistics(bot: Bot):
    print('Start function send_users_with_negative_statistics')

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    efficiency_list = await get_users_with_negative_statistics()  # [[name, efficiency], ...]

    if not efficiency_list:
        await bot.send_message(
            admin_send_remind_id,
            text="No users with negative statistics for today."
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    await bot.send_message(
        admin_send_remind_id,
        text="List of users with negative statistics:\n" +
             "\n".join(f"{name}: {efficiency}" for name, efficiency in efficiency_list)
    )

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–∏–≥–∞–¥–∏—Ä–∞
    foremen_workers = await get_foremen_workers()

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –∏—Ö –±—Ä–∏–≥–∞–¥–∏—Ä–∞–º
    foremen_negative_stats = {}

    for name, efficiency in efficiency_list:
        for foreman_tg_id, workers in foremen_workers.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç —Ä–∞–±–æ—Ç–Ω–∏–∫ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö –±—Ä–∏–≥–∞–¥–∏—Ä–∞
            worker_id = next((wid for wid, wname in workers.items() if wname == name), None)
            if worker_id:
                if foreman_tg_id not in foremen_negative_stats:
                    foremen_negative_stats[foreman_tg_id] = []
                foremen_negative_stats[foreman_tg_id].append(f"{name}: {efficiency}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –±—Ä–∏–≥–∞–¥–∏—Ä—É –µ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    for foreman_tg_id, workers_list in foremen_negative_stats.items():
        await bot.send_message(
            foreman_tg_id,
            text="Your workers with negative statistics:\n" + "\n".join(workers_list)
        )



async def get_foremen_workers():
    print('Start function get_foremen_workers')
    # base_dir = os.path.dirname(os.path.abspath(__file__))  # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–∞
    # db_path = os.path.join(base_dir, '../../tsa/db.sqlite3')  # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ
    db_path = '/app/db/db.sqlite3' # –ü—Ä–∏ —Ä–∞–±–æ—Ç–µ –∏–∑ –¥–æ–∫–µ—Ä–∞
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤
    cursor.execute("""
        SELECT id, tg_id, build_obj_id 
        FROM tsa_app_worker 
        WHERE foreman = 1 AND build_obj_id IS NOT NULL
    """)
    foremen = cursor.fetchall()  # [(id, tg_id, build_obj_id), ...]

    foremen_dict = {}

    for foreman_id, tg_id, build_obj_id in foremen:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—á–∏—Ö, –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ —Ç–æ–º—É –∂–µ –æ–±—ä–µ–∫—Ç—É
        cursor.execute("""
            SELECT id, name 
            FROM tsa_app_worker 
            WHERE build_obj_id = ? AND id != ?
        """, (build_obj_id, foreman_id))

        workers = {row[0]: row[1] for row in cursor.fetchall()}  # {id: name}

        if workers:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –±—Ä–∏–≥–∞–¥–∏—Ä–∞ –µ—Å—Ç—å —Ä–∞–±–æ—á–∏–µ
            foremen_dict[tg_id] = workers  # tg_id –±—Ä–∏–≥–∞–¥–∏—Ä–∞ -> {id: name} —Ä–∞–±–æ—á–∏—Ö

    conn.close()
    print(f'Function get_foremen_workers return {foremen_dict}')
    return foremen_dict


async def no_report(bot: Bot):
    print('Start function no_report')
    # base_dir = os.path.dirname(os.path.abspath(__file__))
    # db_path = os.path.join(base_dir, '../../tsa/db.sqlite3') # –ü—Ä–∏ —Ä–∞–±–æ—Ç–µ –ª–æ–∫–∞–ª—å–Ω–æ
    db_path = '/app/db/db.sqlite3' # –ü—Ä–∏ —Ä–∞–±–æ—Ç–µ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞

    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Å–≤—è–∑—å —Å –æ–±—ä–µ–∫—Ç–æ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
    cursor.execute("SELECT id, name FROM tsa_app_worker WHERE build_obj_id IS NOT NULL")
    all_users = cursor.fetchall()

    # id –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_all_ids = {row[0]: row[1] for row in all_users}  # id -> name

    # –ü–æ–ª—É—á–∞–µ–º worker_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á—ë—Ç
    cursor.execute("""
        SELECT DISTINCT worker_id
        FROM tsa_app_workentry
        WHERE date = DATE('now', '-7 hours')
    """)
    worker_ids_report = {row[0] for row in cursor.fetchall()}  # Set –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á—ë—Ç
    users_no_report = {
        worker_id: user_all_ids[worker_id]
        for worker_id in user_all_ids
        if worker_id not in worker_ids_report
    }

    conn.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç—á–µ—Ç
    if not users_no_report:
        await bot.send_message(admin_send_remind_id, "All employees have sent their reports. ‚úÖ")
    else:
        await bot.send_message(
            admin_send_remind_id,
            text=f"The employees did not send the report: {', '.join(users_no_report.values())}"
        )

    # üîπ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–∏–≥–∞–¥–∏—Ä–∞
    foremen_workers = await get_foremen_workers()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—Ä–∏–≥–∞–¥–∏—Ä–∞–º —Å–ø–∏—Å–æ–∫ –∏—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–¥–∞–ª–∏ –æ—Ç—á–µ—Ç
    for foreman_tg_id, workers in foremen_workers.items():
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç—á–µ—Ç
        workers_no_report = [name for worker_id, name in workers.items() if worker_id in users_no_report]

        if workers_no_report:
            await bot.send_message(
                foreman_tg_id,
                text=f"Your workers did not send the report: {', '.join(workers_no_report)}"
            )


async def send_admin_statistics_for_the_day_by_team(bot: Bot):
    print("–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∑–∞ –¥–µ–Ω—å")
    tz = pytz.timezone("America/Edmonton")
    today_str = datetime.now(tz).strftime("%Y-%m-%d")

    file_dir = "/app/db"
    file_path = os.path.join(file_dir, f"{today_str}.txt")

    if not os.path.exists(file_path):
        for admin_id in admin_ids:
            await bot.send_message(admin_id, f"The statistics file for {today_str} was not found.")
        return

    try:
        with open(file_path, "r", encoding="utf-8") as file:
            data = json.load(file)

        if not isinstance(data, dict):
            raise ValueError("The file does not contain a valid dictionary.")

        # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ, None –∏ –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        filtered_data = {
            key: value for key, value in data.items()
            if value not in (None, 0, 0.0, "", " ")
        }

        if not filtered_data:
            for admin_id in admin_ids:
                await bot.send_message(admin_id, "No meaningful statistics to display today.")
            return

        message_lines = ["üìä *Team statistics for today:*"]
        for key, value in filtered_data.items():
            message_lines.append(f"- `{key}`: *{value}*")

        message = "\n".join(message_lines)

        for admin_id in admin_ids:
            await bot.send_message(
                admin_id,
                message,
            )

    except Exception as e:
        error_msg = f"Error reading the file: {e}"
        for admin_id in admin_ids:
            await bot.send_message(admin_id, error_msg)

